#!/bin/bash

# ==============================================================
# üìå Function: git_check
# --------------------------------------------------------------
# This script checks whether Git is installed and verifies
# if its version matches the required version.
#
# ‚úÖ USAGE:
#   1Ô∏è‚É£ From another script:
#       source "$(dirname "${BASH_SOURCE[0]}")/check"
#       echo "üîç Looking for check script at: $(dirname "${BASH_SOURCE[0]}")/check"
#       git_check ">=2.47.1"
#
#   2Ô∏è‚É£ Directly from CLI:
#       bash ./.devenv/tools/git/check ">=2.47.1"
#
# ‚úÖ PARAMETERS:
#   - REQUIRED_GIT_VERSION (optional): Expected Git version (default: "latest").
#
# ‚úÖ RETURNS:
#   - IS_GIT_INSTALLED (bool)            : `true` if Git is installed, `false` otherwise.
#   - GIT_VERSION_MATCH (bool)           : `true` if installed version matches required.
#   - INSTALLED_GIT_VERSION (str)        : Installed Git version (e.g., "2.47.1").
#   - LATEST_AVAILABLE_GIT_VERSION (str) : The latest available Git version.
#
# ‚úÖ EXPORTS:
#   These values are exported for use in other scripts.
#
# ‚úÖ EXAMPLES:
#   # Test from CLI
#   bash ./.devenv/tools/git/check ">=2.47.1"
#
#   # Source from another script
#   source "$(dirname "${BASH_SOURCE[0]}")/check"
#   echo "üîç Looking for check script at: $(dirname "${BASH_SOURCE[0]}")/check"
#   git_check ">=2.47.1"
#   echo "Git Installed: $IS_GIT_INSTALLED, Version: $INSTALLED_GIT_VERSION"
#
# --------------------------------------------------------------
# üîí License:
# Copyright 2025 ¬© Astitv Singh <https://github.com/astitvsingh>
# SPDX-License-Identifier: MIT
# ==============================================================

# --------------------------------------------------------------
# ‚ö†Ô∏è Ensure the script exits immediately if any command fails.
# --------------------------------------------------------------
set -e

# --------------------------------------------------------------
# üõ†Ô∏è Function: git_check
# --------------------------------------------------------------
# üîπ Checks whether Git is installed.
# üîπ Determines if its version matches the required version.
# üîπ Fetches the latest available Git version.
# üîπ Exports relevant status variables.
# --------------------------------------------------------------
git_check() {
  # üéØ Step 1: Read required Git version from arguments (default: "latest").
  local REQUIRED_GIT_VERSION=${1:-"latest"}
  echo "üîÑ $(dirname "${BASH_SOURCE[0]}")/check: Step 1: Read required Git version from arguments (default: "latest"): $REQUIRED_GIT_VERSION"

  # üè∑Ô∏è Step 2: Define default values for Git status variables.
  IS_GIT_INSTALLED=false             # ‚úÖ Is Git installed?
  GIT_VERSION_MATCH=false            # ‚úÖ Does Git version match the required version?
  INSTALLED_GIT_VERSION="none"       # ‚úÖ Stores the installed Git version.
  LATEST_AVAILABLE_GIT_VERSION="unknown"  # ‚úÖ Stores the latest available Git version.
  echo "üîÑ $(dirname "${BASH_SOURCE[0]}")/check: Step 2: Define default values for Git status variables"
  # echo "üîÑ Task 2.1: ‚úÖ Is Git installed?: $IS_GIT_INSTALLED"
  # echo "üîÑ Task 2.2: ‚úÖ Does Git version match the required version?: $GIT_VERSION_MATCH"
  # echo "üîÑ Task 2.3: ‚úÖ Stores the installed Git version: $INSTALLED_GIT_VERSION"
  # echo "üîÑ Task 2.4: ‚úÖ Stores the latest available Git version: $LATEST_AVAILABLE_GIT_VERSION"

  echo "üîç $(dirname "${BASH_SOURCE[0]}")/check: Step 3: Checking Git installation..."

  # --------------------------------------------------------------
  # üöÄ Step 3: Check if Git is installed
  # --------------------------------------------------------------
  if command -v git &>/dev/null; then
    IS_GIT_INSTALLED=true  # ‚úÖ Git is installed.
    echo "üîç $(dirname "${BASH_SOURCE[0]}")/check: Step 4.: Checking Git installation..."

    # üè∑Ô∏è Sub-task 3.1: Fetch the installed Git version.
    INSTALLED_GIT_VERSION=$(git --version | awk '{print $3}')
    echo "‚úÖ  $(dirname "${BASH_SOURCE[0]}")/check: Git is installed: version $INSTALLED_GIT_VERSION"

    # üè∑Ô∏è Sub-task 3.2: Extract only the numeric part of the installed version.
    GIT_INSTALLED_VERSION_CLEAN=$(echo "$INSTALLED_GIT_VERSION" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

    # üè∑Ô∏è Sub-task 3.3: Extract only the numeric part of the required version.
    GIT_REQUIRED_VERSION_CLEAN=$(echo "$REQUIRED_GIT_VERSION" | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')

    # --------------------------------------------------------------
    # üöÄ Step 4: Fetch the latest available Git version
    # --------------------------------------------------------------
    case "$OSTYPE" in
      linux*)
        # üè∑Ô∏è Sub-task 5.1: Fetch latest version for Linux (APT-based systems)
        LATEST_AVAILABLE_GIT_VERSION=$(apt-cache policy git | grep Candidate | awk '{print $2}' | grep -oE '[0-9]+\.[0-9]+\.[0-9]+') ;;
      darwin*)
        # üè∑Ô∏è Sub-task 5.2: Fetch latest version for macOS (Homebrew)
        LATEST_AVAILABLE_GIT_VERSION=$(brew info git | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -1) ;;
      msys*|cygwin*)
        # üè∑Ô∏è Sub-task 5.3: Fetch latest version for Windows (Chocolatey)
        LATEST_AVAILABLE_GIT_VERSION=$(choco search git --exact --limit-output --all | grep -Eo '[0-9]+\.[0-9]+\.[0-9]+' | head -1) ;;
      *)
        # üè∑Ô∏è Sub-task 5.4: Handle unsupported OS
        LATEST_AVAILABLE_GIT_VERSION="unknown" ;;
    esac

    echo "üîÑ $(dirname "${BASH_SOURCE[0]}")/check: Step 6: Latest Git version available: $LATEST_AVAILABLE_GIT_VERSION"

    # --------------------------------------------------------------
    # üöÄ Step 7: Compare Installed Version with Required Version
    # --------------------------------------------------------------
    echo "üîÑ $(dirname "${BASH_SOURCE[0]}")/check: Step 7: Compare Installed Version with Required Version"

    if [[ "$REQUIRED_GIT_VERSION" == "latest" ]]; then
      # üè∑Ô∏è Sub-task 7.1: Compare Installed vs. Latest Available Version
      if [[ "$(printf "%s\n%s" "$LATEST_AVAILABLE_GIT_VERSION" "$GIT_INSTALLED_VERSION_CLEAN" | sort -V | head -1)" == "$LATEST_AVAILABLE_GIT_VERSION" ]]; then
        GIT_VERSION_MATCH=true
        echo "‚úÖ  $(dirname "${BASH_SOURCE[0]}")/check: Git is already up-to-date ($GIT_INSTALLED_VERSION_CLEAN)."
      else
        echo "‚ö†Ô∏è  $(dirname "${BASH_SOURCE[0]}")/check: Installed Git version ($GIT_INSTALLED_VERSION_CLEAN) is outdated. Latest available: $LATEST_AVAILABLE_GIT_VERSION."
      fi
    else
      # üè∑Ô∏è Sub-task 7.2: Compare Installed vs. Required Versions using `sort -V`
      if [[ "$(printf "%s\n%s" "$GIT_REQUIRED_VERSION_CLEAN" "$GIT_INSTALLED_VERSION_CLEAN" | sort -V | head -1)" == "$GIT_REQUIRED_VERSION_CLEAN" ]]; then
        GIT_VERSION_MATCH=true
        echo "‚úÖ  $(dirname "${BASH_SOURCE[0]}")/check: Git version meets or exceeds required version ($GIT_REQUIRED_VERSION_CLEAN)."
      else
        echo "‚ö†Ô∏è  $(dirname "${BASH_SOURCE[0]}")/check: Git version mismatch (Installed: $GIT_INSTALLED_VERSION_CLEAN, Required: $GIT_REQUIRED_VERSION_CLEAN)."
      fi
    fi
  else
    echo "‚ùå  $(dirname "${BASH_SOURCE[0]}")/check: Git is not installed."
  fi

  # --------------------------------------------------------------
  # üöÄ Step 8: Export Variables for External Use
  # --------------------------------------------------------------
  export REQUIRED_GIT_VERSION
  export IS_GIT_INSTALLED
  export GIT_VERSION_MATCH
  export INSTALLED_GIT_VERSION
  export LATEST_AVAILABLE_GIT_VERSION
}

# --------------------------------------------------------------
# üõ†Ô∏è Direct Execution Handling (Allows CLI Usage)
# --------------------------------------------------------------
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  git_check "$1"
  echo -e "\nüîç  .devenv/tools/git/check Output:"
  echo "    - REQUIRED_GIT_VERSION: $REQUIRED_GIT_VERSION"
  echo "    - IS_GIT_INSTALLED: $IS_GIT_INSTALLED"
  echo "    - GIT_VERSION_MATCH: $GIT_VERSION_MATCH"
  echo "    - INSTALLED_GIT_VERSION: $INSTALLED_GIT_VERSION"
  echo "    - LATEST_AVAILABLE_GIT_VERSION: $LATEST_AVAILABLE_GIT_VERSION"
fi
