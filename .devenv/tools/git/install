#!/bin/bash

# ==============================================================
# üìå Function: git_install
# --------------------------------------------------------------
# This script installs or upgrades Git if it is not installed
# or if the installed version does not match the required version.
#
# ‚úÖ USAGE:
#   1Ô∏è‚É£ From another script:
#       source "$(dirname "${BASH_SOURCE[0]}")/install"
#       git_install ">=2.47.1"
#
#   2Ô∏è‚É£ Directly from CLI:
#       bash ./.devenv/tools/git/install ">=2.47.1"
#
# ‚úÖ PARAMETERS:
#   - REQUIRED_GIT_VERSION (optional): Specifies the version to install.
#     Default: `>=2.47.1` (Ensures compatibility across OS).
#
# ‚úÖ DEPENDENCIES:
#   - Requires `check` script to be sourced beforehand.
#
# ‚úÖ EXPORTS:
#   - After execution, the newly installed Git version is accessible.
#
# ‚úÖ EXAMPLES:
#   # Test from CLI
#   bash ./.devenv/tools/git/install ">=2.48.1"
#
#   # Source from another script
#   source "$(dirname "${BASH_SOURCE[0]}")/install"
#   git_install ">=2.48.1"
#
# --------------------------------------------------------------
# üîí License:
# Copyright 2025 ¬© Astitv Singh <https://github.com/astitvsingh>
# SPDX-License-Identifier: MIT
# ==============================================================

# --------------------------------------------------------------
# ‚ö†Ô∏è Ensure the script exits immediately if any command fails.
# --------------------------------------------------------------
set -e

# --------------------------------------------------------------
# üöÄ Step 1: Auto-Elevate Privileges if Needed
# --------------------------------------------------------------

# üè∑Ô∏è Detect if running as root/admin
if [[ "$OSTYPE" == "linux-gnu"* || "$OSTYPE" == "darwin"* ]]; then
  if [[ "$EUID" -ne 0 ]]; then
    echo "üõë This script must be run as root! Restarting with sudo..."
    exec sudo bash "$0" "$@"
  fi
elif [[ "$OSTYPE" == "msys" || "$OSTYPE" == "cygwin" ]]; then
  # Check if running as admin in Windows
  if ! net session &>/dev/null; then
    echo "üõë This script must be run as Administrator! Restarting..."
    # powershell Start-Process -Verb RunAs -FilePath "C:\Program Files\Git\bin\bash.exe" -ArgumentList "'$0 $*'"
    powershell Start-Process -Verb RunAs -FilePath "\"C:\Program Files\Git\bin\bash.exe\"" -ArgumentList "'$0 $*'" -Wait
    # powershell Start-Process -Verb RunAs -FilePath "powershell" -ArgumentList "-NoExit", "-Command", "\"C:\Program Files\Git\bin\bash.exe\"" $0 $*'"
    exit 0
  fi
fi

# --------------------------------------------------------------
# üöÄ Step 1: Load `git_check` to Determine Installation Need
# --------------------------------------------------------------
source "$(dirname "${BASH_SOURCE[0]}")/check"
echo "üîç $(dirname "${BASH_SOURCE[0]}")/install: Looking for check script at: $(dirname "${BASH_SOURCE[0]}")/check"

# --------------------------------------------------------------
# üõ†Ô∏è Function: git_install
# --------------------------------------------------------------
# üîπ Installs or upgrades Git based on the required version.
# üîπ Calls `git_check` to determine if installation is necessary.
# --------------------------------------------------------------
git_install() {
  # üéØ Step 2: Read required Git version from arguments (default: ">=2.47.1").
  local REQUIRED_GIT_VERSION=${1:-">=2.47.1"}

  echo "üì• $(dirname "${BASH_SOURCE[0]}")/install: Step 3: Preparing to install Git version $REQUIRED_GIT_VERSION..."

  # --------------------------------------------------------------
  # üöÄ Step 4: Run `git_check` to Determine Installation Need
  # --------------------------------------------------------------
  git_check "$REQUIRED_GIT_VERSION"

  # üè∑Ô∏è Sub-task 4.1: If Git is installed and the version matches, no installation is needed.
  if [[ "$IS_GIT_INSTALLED" == "true" && "$GIT_VERSION_MATCH" == "true" ]]; then
    echo "‚úÖ $(dirname "${BASH_SOURCE[0]}")/install: Git is already installed and up-to-date."
    return 0
  fi

  echo "üì¶ $(dirname "${BASH_SOURCE[0]}")/install: Step 5: Installing Git $REQUIRED_GIT_VERSION..."

  # --------------------------------------------------------------
  # üöÄ Step 6: Identify the Operating System and Install Git
  # --------------------------------------------------------------
  case "$OSTYPE" in
    linux*)
      sudo apt update
      if [[ "$REQUIRED_GIT_VERSION" == "latest" ]]; then
        sudo apt install -y git
      else
        sudo apt install -y git="$REQUIRED_GIT_VERSION"
      fi ;;
      
    darwin*)
      brew update
      if [[ "$REQUIRED_GIT_VERSION" == "latest" ]]; then
        brew install git
      else
        brew install git@"$REQUIRED_GIT_VERSION"
      fi ;;

    msys*|cygwin*)
      if [[ "$REQUIRED_GIT_VERSION" == "latest" ]]; then
        choco install git -y
      else
        choco install git --version="$REQUIRED_GIT_VERSION" -y
      fi ;;

    *)
      echo "‚ö†Ô∏è $(dirname "${BASH_SOURCE[0]}")/install: Unsupported OS. Please install Git manually."
      return 1 ;;
  esac

  # --------------------------------------------------------------
  # üöÄ Step 7: Verify Installation & Export New Version
  # --------------------------------------------------------------
  if command -v git &>/dev/null; then
    INSTALLED_GIT_VERSION=$(git --version | awk '{print $3}')
    echo "‚úÖ $(dirname "${BASH_SOURCE[0]}")/install: Git successfully installed: version $INSTALLED_GIT_VERSION"
    export INSTALLED_GIT_VERSION
  else
    echo "‚ùå $(dirname "${BASH_SOURCE[0]}")/install: Git installation failed. Please try manually."
    return 1
  fi
}

# --------------------------------------------------------------
# üõ†Ô∏è Direct Execution Handling (Allows CLI Usage)
# --------------------------------------------------------------
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  REQUIRED_GIT_VERSION=${1:-">=2.47.1"}
  git_install "$REQUIRED_GIT_VERSION"

  echo -e "\nüîç  .devenv/tools/git/install Output:"
  echo "    - REQUIRED_GIT_VERSION: $REQUIRED_GIT_VERSION"
  echo "    - INSTALLED_GIT_VERSION: $INSTALLED_GIT_VERSION"
fi
